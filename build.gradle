plugins {
    id 'org.jetbrains.kotlin.jvm' version '2.0.0'
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.jetbrains.kotlin:kotlin-test'
    implementation 'org.testng:testng:7.8.0'
    implementation 'io.appium:java-client:8.6.0'
}

tasks.register('testMinAndMaxWithXml', Test) {
    useTestNG {
        suites 'src/test/resources/test-min-and-max.xml'
    }
    afterSuite { desc, result ->
        if (!desc.parent) {
            def output = "Results: \u001B[1m${result.resultType}\u001B[0m (${result.testCount} scenarios, " +
                    "${result.successfulTestCount} \u001B[0;32mpassed\u001B[0m, " +
                    "${result.failedTestCount} \u001B[0;31mfailed\u001B[0m, " +
                    "${result.skippedTestCount} \u001B[0;33mskipped\u001B[0m)"
            def startItem = 'ğŸ¤–  '
            def repeatLength = startItem.length() + output.length() - 40
            println('\n' + ('-' * repeatLength) + '\n\n' + startItem + output + '\n\n' + ('-' * repeatLength))
        }
    }
}

tasks.register('runAndroidE2ETest', Test) {
    doFirst {
        systemProperty 'platform', 'android'
    }
    useTestNG {
        suites 'src/test/resources/test-android.xml'
    }
    afterSuite { desc, result ->
        if (!desc.parent) {
            def output = "Results: \u001B[1m${result.resultType}\u001B[0m (${result.testCount} scenarios, " +
                    "${result.successfulTestCount} \u001B[0;32mpassed\u001B[0m, " +
                    "${result.failedTestCount} \u001B[0;31mfailed\u001B[0m, " +
                    "${result.skippedTestCount} \u001B[0;33mskipped\u001B[0m)"
            def startItem = 'ğŸ¤–  '
            def repeatLength = startItem.length() + output.length() - 40
            println('\n' + ('-' * repeatLength) + '\n\n' + startItem + output + '\n\n' + ('-' * repeatLength))
        }
    }
}

tasks.register('runIOSE2ETest', Test) {
    doFirst {
        systemProperty 'platform', 'ios'
    }
    useTestNG {
        suites 'src/test/resources/test-ios.xml'
    }
    afterSuite { desc, result ->
        if (!desc.parent) {
            def output = "Results: \u001B[1m${result.resultType}\u001B[0m (${result.testCount} scenarios, " +
                    "${result.successfulTestCount} \u001B[0;32mpassed\u001B[0m, " +
                    "${result.failedTestCount} \u001B[0;31mfailed\u001B[0m, " +
                    "${result.skippedTestCount} \u001B[0;33mskipped\u001B[0m)"
            def startItem = 'ğŸ¤–  '
            def repeatLength = startItem.length() + output.length() - 40
            println('\n' + ('-' * repeatLength) + '\n\n' + startItem + output + '\n\n' + ('-' * repeatLength))
        }
    }
}
