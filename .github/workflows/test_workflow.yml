name: '[Test] Android Test'

on:
  workflow_dispatch:
    inputs:
      branch:
        description: '테스트를 실행할 브랜치'
        required: true
        default: 'main'
      test_scope:
        description: '테스트 범위'
        required: true
        type: choice
        options:
          - Folder
          - Class
          - Method
      test_target:
        description: '테스트 대상 (선택한 범위에 따라 폴더/클래스/메소드 이름 입력)'
        required: true
        type: string

jobs:
  android-test:
    runs-on: ubuntu-latest

    steps:
      - name: 코드 체크아웃
        uses: actions/checkout@v2
        with:
          ref: ${{ github.event.inputs.branch }}

      - name: Node.js 설정
        uses: actions/setup-node@v2
        with:
          node-version: '16'

      - name: Java 8 설정
        uses: actions/setup-java@v2
        with:
          java-version: '8'
          distribution: 'adopt'

      - name: JAXB 라이브러리 다운로드
        run: |
          wget https://repo1.maven.org/maven2/javax/xml/bind/jaxb-api/2.3.1/jaxb-api-2.3.1.jar -P $HOME/.m2/repository/javax/xml/bind/
          wget https://repo1.maven.org/maven2/org/glassfish/jaxb/jaxb-runtime/2.3.1/jaxb-runtime-2.3.1.jar -P $HOME/.m2/repository/org/glassfish/jaxb/jaxb-runtime/2.3.1/
          wget https://repo1.maven.org/maven2/jakarta/activation/jakarta.activation-api/1.2.2/jakarta.activation-api-1.2.2.jar -P $HOME/.m2/repository/jakarta/activation/jakarta.activation-api/1.2.2/

      - name: Android SDK 및 ADB 설치
        run: |
          sudo apt-get update
          sudo apt-get install -y openjdk-8-jdk
          mkdir -p $HOME/android-sdk
          cd $HOME/android-sdk
          wget https://dl.google.com/android/repository/sdk-tools-linux-3859397.zip
          unzip sdk-tools-linux-3859397.zip
          rm sdk-tools-linux-3859397.zip
          yes | $HOME/android-sdk/tools/bin/sdkmanager --licenses
          $HOME/android-sdk/tools/bin/sdkmanager "platform-tools" "platforms;android-30"

      - name: 환경 변수 설정
        run: |
          echo "ANDROID_HOME=$HOME/android-sdk" >> $GITHUB_ENV
          echo "PATH=$ANDROID_HOME/platform-tools:$PATH" >> $GITHUB_ENV
          echo "PATH=$HOME/android-sdk/tools/bin:$PATH" >> $GITHUB_ENV

      - name: Appium 및 드라이버 설치
        run: |
          npm install -g appium
          echo "APPIUM_HOME=$(npm prefix -g)/lib/node_modules/appium" >> $GITHUB_ENV
          echo "PATH=$(npm bin -g):$PATH" >> $GITHUB_ENV
          appium driver install uiautomator2

      - name: runserver.sh 생성
        run: |
          cat << EOF > runserver.sh
          #!/bin/bash
          echo "Appium 서버를 시작합니다..."
          export PATH=\$PATH:$(npm bin -g)
          APPIUM_PATH=\$(which appium)
          if [ -z "\$APPIUM_PATH" ]; then
            echo "Appium을 찾을 수 없습니다."
            exit 1
          fi
          echo "Appium 경로: \$APPIUM_PATH"
          \$APPIUM_PATH --address 0.0.0.0 --port 4723 --log-level debug &> appium.log &
          APPIUM_PID=\$!
          sleep 30
          
          if ps -p \$APPIUM_PID > /dev/null
          then
            echo "Appium 서버가 시작되었습니다. (PID: \$APPIUM_PID)"
            tail -n 10 appium.log
          else
            echo "Appium 서버 시작에 실패했습니다."
            exit 1
          fi
          EOF
          chmod +x runserver.sh

      - name: Appium 서버 시작
        run: |
          ./runserver.sh
          echo "Appium 서버 시작 중..."
          sleep 30

      - name: 에뮬레이터 연결 확인
        run: |
          echo "에뮬레이터 연결 확인 중..."
          EMULATOR_IP=<에뮬레이터 IP>  # 에뮬레이터의 IP 주소로 변경
          EMULATOR_PORT=5555  # 일반적으로 5555 사용
          adb connect $EMULATOR_IP:$EMULATOR_PORT || (echo "에뮬레이터에 연결할 수 없습니다." && exit 1)
          adb wait-for-device
          echo "에뮬레이터가 준비되었습니다."

      - name: Android 테스트 실행
        run: |
          echo "테스트 범위: ${{ github.event.inputs.test_scope }}"
          echo "테스트 대상: ${{ github.event.inputs.test_target }}"
          if [ "${{ github.event.inputs.test_scope }}" = "Class" ] && [ "${{ github.event.inputs.test_target }}" = "AndroidTest" ]; then
            ./gradlew test --tests "*.AndroidTest" -cp $HOME/.m2/repository/javax/xml/bind/jaxb-api-2.3.1.jar:$HOME/.m2/repository/org/glassfish/jaxb/jaxb-runtime-2.3.1.jar:$HOME/.m2/repository/jakarta/activation/jakarta.activation-api-1.2.2/jakarta.activation-api-1.2.2.jar || (echo "테스트 실행 중 오류 발생" && exit 1)
          else
            echo "선택한 테스트 범위 또는 대상이 AndroidTest 클래스가 아닙니다."
            exit 1
          fi

      - name: Appium 서버 로그 출력
        if: always()
        run: |
          echo "Appium 서버 로그:"
          cat appium.log

      - name: Appium 서버 종료
        if: always()
        run: |
          pkill -f appium || true
          echo "Appium 서버 종료"
