name: '[Test] Android Test'

on:
  workflow_dispatch:
    inputs:
      branch:
        description: '테스트를 실행할 브랜치'
        required: true
        default: 'main'
      test_scope:
        description: '테스트 범위'
        required: true
        type: choice
        options:
          - Folder
          - Class
          - Method
      test_target:
        description: '테스트 대상 (선택한 범위에 따라 폴더/클래스/메소드 이름 입력)'
        required: true
        type: string

jobs:
  android-test:
    runs-on: ubuntu-latest

    steps:
      - name: 코드 체크아웃
        uses: actions/checkout@v2
        with:
          ref: ${{ github.event.inputs.branch }}

      - name: Node.js 설정
        uses: actions/setup-node@v2
        with:
          node-version: '14'

      - name: Appium 및 드라이버 설치
        run: |
          npm install -g appium
          echo "APPIUM_HOME=$(npm prefix -g)/lib/node_modules/appium" >> $GITHUB_ENV
          echo "PATH=$(npm bin -g):$PATH" >> $GITHUB_ENV
          appium driver install uiautomator2  # UIAutomator2 드라이버 설치

      - name: 환경 변수 및 Appium 설치 확인
        run: |
          echo "PATH: $PATH"
          echo "APPIUM_HOME: $APPIUM_HOME"
          which appium || echo "appium not found in PATH"
          npm list -g appium

      - name: Java 설정
        uses: actions/setup-java@v2
        with:
          java-version: '11'
          distribution: 'adopt'

      - name: runserver.sh 생성
        run: |
          cat << EOF > runserver.sh
          #!/bin/bash
          echo "Appium 서버를 시작합니다..."
          export PATH=\$PATH:$(npm bin -g)  # 다시 PATH 설정
          APPIUM_PATH=\$(which appium)
          if [ -z "\$APPIUM_PATH" ]; then
            echo "Appium을 찾을 수 없습니다."
            exit 1
          fi
          echo "Appium 경로: \$APPIUM_PATH"
          
          # Appium 서버 시작 및 로그 출력
          \$APPIUM_PATH --address 0.0.0.0 --port 4723 --log-level debug &> appium.log &
          APPIUM_PID=\$!
          sleep 30  # 대기 시간 늘리기
          
          if ps -p \$APPIUM_PID > /dev/null
          then
            echo "Appium 서버가 시작되었습니다. (PID: \$APPIUM_PID)"
            tail -n 10 appium.log  # 로그 출력
          else
            echo "Appium 서버 시작에 실패했습니다."
            exit 1
          fi
          EOF
          chmod +x runserver.sh

      - name: Appium 서버 시작
        run: |
          ./runserver.sh
          echo "Appium 서버 시작 중..."
          sleep 30  # Appium 서버가 완전히 시작될 때까지 대기

      - name: Appium 서버 상태 확인
        run: |
          echo "Appium 서버 상태 확인 중..."
          curl -f http://localhost:4723/status || (echo "Appium 서버가 응답하지 않습니다. 로그 확인: $(cat appium.log)" && exit 1)

      - name: 에뮬레이터 연결 확인
        run: |
          echo "에뮬레이터 연결 확인 중..."
          adb devices || (echo "에뮬레이터에 연결할 수 없습니다." && exit 1)
          adb wait-for-device
          echo "에뮬레이터가 준비되었습니다."

      - name: Android 테스트 실행
        run: |
          echo "테스트 범위: ${{ github.event.inputs.test_scope }}"
          echo "테스트 대상: ${{ github.event.inputs.test_target }}"
          if [ "${{ github.event.inputs.test_scope }}" = "Class" ] && [ "${{ github.event.inputs.test_target }}" = "AndroidTest" ]; then
            ./gradlew test --tests "*.AndroidTest"
          else
            echo "선택한 테스트 범위 또는 대상이 AndroidTest 클래스가 아닙니다."
          fi

      - name: Appium 서버 로그 출력
        if: always()
        run: |
          echo "Appium 서버 로그:"
          cat appium.log

      - name: Appium 서버 종료
        if: always()
        run: |
          pkill -f appium || true
          echo "Appium 서버 종료"
