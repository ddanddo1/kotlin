name: TestWorkflow

on:
  workflow_dispatch:
    inputs:
      branch:
        description: '테스트할 브랜치'
        required: true
        default: 'main'
      test_scope:
        description: '테스트˚ 범위'
        required: true
        type: choice
        options:
          - folder
          - class
          - method
      test_target:
        description: '테스트 대상 (폴더/클래스/메소드 이름)'
        required: true
        default: 'AndroidTest'

jobs:
  android_test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{ github.event.inputs.branch }}

      - name: Gradle 캐시
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Appium 서버 시작
        run: |
          appium &
          echo $! > appium_pid.txt
          sleep 10  # Appium 서버가 완전히 시작될 때까지 대기
          if pgrep -x "appium" > /dev/null
          then
            echo "Appium 서버가 성공적으로 시작되었습니다."
          else
            echo "Appium 서버 시작에 실패했습니다."
            exit 1
          fi

      - name: Appium 및 환경 상태 확인
        run: |
          echo "PATH: $PATH"
          echo "ANDROID_HOME: $ANDROID_HOME"
          which adb
          which appium
          ps aux | grep appium
          netstat -tuln | grep 4723

      - name: ADB 서버 재시작 및 에뮬레이터 확인
        run: |
          adb kill-server
          adb start-server
          sleep 5
          devices=$(adb devices | grep -v "List" | grep "device$")
          if [ -n "$devices" ]; then
            echo "에뮬레이터가 실행 중입니다:"
            echo "$devices"
          else
            echo "에뮬레이터가 감지되지 않습니다. 상태를 확인해주세요."
            adb devices
            exit 1
          fi

      - name: 테스트 실행
        run: |
          if [ "${{ github.event.inputs.test_scope }}" = "folder" ]; then
            ./gradlew connectedAndroidTest -Pandroid.testInstrumentationRunnerArguments.package=${{ github.event.inputs.test_target }}
          elif [ "${{ github.event.inputs.test_scope }}" = "class" ]; then
            ./gradlew connectedAndroidTest -Pandroid.testInstrumentationRunnerArguments.class=${{ github.event.inputs.test_target }}
          elif [ "${{ github.event.inputs.test_scope }}" = "method" ]; then
            ./gradlew connectedAndroidTest -Pandroid.testInstrumentationRunnerArguments.class=${{ github.event.inputs.test_target }}#${{ github.event.inputs.test_target }}
          else
            echo "잘못된 테스트 범위입니다."
            exit 1
          fi

      - name: 테스트 결과 업로드
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: test-results
          path: '**/build/test-results'